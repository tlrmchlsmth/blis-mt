#!/bin/bash
#
#  BLIS    
#  An object-based framework for developing high-performance BLAS-like
#  libraries.
#
#  Copyright (C) 2013, The University of Texas
#
#  Redistribution and use in source and binary forms, with or without
#  modification, are permitted provided that the following conditions are
#  met:
#   - Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#   - Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   - Neither the name of The University of Texas nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#

#
# Makefile
#
# Field G. Van Zee
# 
# Makefile for standalone BLIS test drivers.
#

#
# --- Makefile PHONY target definitions ----------------------------------------
#

.PHONY: all \
        blis openblas atlas mkl \
        clean cleanx



#
# --- Makefile initialization --------------------------------------------------
#

# Define the name of the configuration file.
CONFIG_MK_FILE    := config.mk

# Define the name of the file containing build and architecture-specific
# makefile definitions.
MAKE_DEFS_FILE    := make_defs.mk

# Locations of important files.
ROOT_PATH         := ..
CONFIG_DIR        := config



#
# --- Include makefile configuration file --------------------------------------
#

# Construct the path to the makefile configuration file that was generated by
# the configure script.
CONFIG_MK_PATH    := $(ROOT_PATH)/$(CONFIG_MK_FILE)

# Include the configuration file.
-include $(CONFIG_MK_PATH)

# Detect whether we actually got the configuration file. If we didn't, then
# it is likely that the user has not yet generated it (via configure).
ifeq ($(strip $(CONFIG_MK_INCLUDED)),yes)
CONFIG_MK_PRESENT := yes
else
CONFIG_MK_PRESENT := no
endif

# Now we have access to CONFIG_NAME, which tells us which sub-directory of the
# config directory to use as our configuration.
CONFIG_PATH       := $(ROOT_PATH)/$(CONFIG_DIR)/$(CONFIG_NAME)



#
# --- Include makefile definitions file ----------------------------------------
#

# Construct the path to the makefile definitions file residing inside of
# the configuration sub-directory.
MAKE_DEFS_MK_PATH := $(CONFIG_PATH)/$(MAKE_DEFS_FILE)

# Include the makefile definitions file.
-include $(MAKE_DEFS_MK_PATH)

# Detect whether we actually got the make definitios file. If we didn't, then
# it is likely that the configuration is invalid (or incomplete).
ifeq ($(strip $(MAKE_DEFS_MK_INCLUDED)),yes)
MAKE_DEFS_MK_PRESENT := yes
else
MAKE_DEFS_MK_PRESENT := no
endif



#
# --- BLAS and LAPACK implementations ------------------------------------------
#

# BLIS library and header path. This is simply wherever it was installed.
BLIS_LIB_PATH  := $(INSTALL_PREFIX)/lib
BLIS_INC_PATH  := $(INSTALL_PREFIX)/include

# BLIS library.
BLIS_LIB       := $(BLIS_LIB_PATH)/libblis.a

# BLAS library path(s). This is where the BLAS libraries reside.
BLAS_LIB_PATH  := $(HOME)/flame/lib

# OpenBLAS, ATLAS, and MKL libraries.
#BLAS_LIB       := $(LIB_PATH)/libblas.a
#BLAS_LIB       := $(LIB_PATH)/libgoto.a
#BLAS_LIB       := $(LIB_PATH)/libgoto2.a
OPENBLAS_LIB   := $(BLAS_LIB_PATH)/libopenblas.a
ATLAS_LIB      := $(BLAS_LIB_PATH)/libf77blas.a \
                  $(BLAS_LIB_PATH)/libatlas.a
#MKL_LIB        := -L/opt/intel/mkl/10.2.2.025/lib/em64t/ \
                  -lmkl_sequential -lmkl_core -lmkl_intel_lp64



#
# --- General build definitions ------------------------------------------------
#

TEST_SRC_PATH  := .
TEST_OBJ_PATH  := .

# Gather all local object files.
TEST_OBJS      := $(patsubst $(TEST_SRC_PATH)/%.c, \
                             $(TEST_OBJ_PATH)/%.o, \
                             $(wildcard $(TEST_SRC_PATH)/*.c))

# Override CFLAGS from make_defs.mk here, if desired.
#CFLAGS         := -g -O2 -march=native

# Add installed and local header paths to CFLAGS
CFLAGS         += -I$(BLIS_INC_PATH) -I$(TEST_SRC_PATH)

LINKER         := $(CC)
#LDFLAGS        := -L/usr/lib/gcc/x86_64-redhat-linux/4.1.2 -L/usr/lib/gcc/x86_64-redhat-linux/4.1.2/../../../../lib64 -L/lib/../lib64 -L/usr/lib/../lib64 -lgfortranbegin -lgfortran -lm
#LDFLAGS        += -lpthread
#LDFLAGS        := -L/usr/lib/gcc/i486-linux-gnu/4.4.3 -L/usr/lib/gcc/i486-linux-gnu/4.4.3/../../../../lib -L/lib/../lib -L/usr/lib/../lib -L/usr/lib/gcc/i486-linux-gnu/4.4.3/../../.. -L/usr/lib/i486-linux-gnu -lgfortranbegin -lgfortran -lm
LDFLAGS += -L/bgsys/drivers/ppcfloor/spi/lib -lSPI -lrt -lm -qthreaded -qsmp=omp


#
# --- Targets/rules ------------------------------------------------------------
#

all: tyler

tyler: test_gemm_blis.x

blis: test_gemv_blis.x \
      test_ger_blis.x \
      test_hemv_blis.x \
      test_her_blis.x \
      test_her2_blis.x \
      test_trmv_blis.x \
      test_trsv_blis.x \
      \
      test_gemm_blis.x \
      test_hemm_blis.x \
      test_herk_blis.x \
      test_her2k_blis.x \
      test_trmm_blis.x \
      test_trsm_blis.x

openblas: test_gemv_openblas.x \
      test_ger_openblas.x \
      test_hemv_openblas.x \
      test_her_openblas.x \
      test_her2_openblas.x \
      test_trmv_openblas.x \
      test_trsv_openblas.x \
      \
      test_gemm_openblas.x \
      test_hemm_openblas.x \
      test_herk_openblas.x \
      test_her2k_openblas.x \
      test_trmm_openblas.x \
      test_trsm_openblas.x

atlas: test_gemv_atlas.x \
      test_ger_atlas.x \
      test_hemv_atlas.x \
      test_her_atlas.x \
      test_her2_atlas.x \
      test_trmv_atlas.x \
      test_trsv_atlas.x \
      \
      test_gemm_atlas.x \
      test_hemm_atlas.x \
      test_herk_atlas.x \
      test_her2k_atlas.x \
      test_trmm_atlas.x \
      test_trsm_atlas.x

mkl:  test_gemv_mkl.x \
      test_ger_mkl.x \
      test_hemv_mkl.x \
      test_her_mkl.x \
      test_her2_mkl.x \
      test_trmv_mkl.x \
      test_trsv_mkl.x \
      \
      test_gemm_mkl.x \
      test_hemm_mkl.x \
      test_herk_mkl.x \
      test_her2k_mkl.x \
      test_trmm_mkl.x \
      test_trsm_mkl.x


# --Object file rules --

$(TEST_OBJ_PATH)/%.o: $(TEST_SRC_PATH)/%.c
	$(CC) $(CFLAGS) -c $< -o $@

test_%_openblas.o: test_%.c
	$(CC) $(CFLAGS) -DBLAS=\"openblas\" -c $< -o $@

test_%_atlas.o: test_%.c
	$(CC) $(CFLAGS) -DBLAS=\"atlas\" -c $< -o $@

test_%_mkl.o: test_%.c
	$(CC) $(CFLAGS) -DBLAS=\"mkl\" -c $< -o $@

test_%_blis.o: test_%.c
	$(CC) $(CFLAGS) -DBLIS -c $< -o $@


# -- Executable file rules --

# NOTE: For the BLAS test drivers, we place the BLAS libraries before BLIS
# on the link command line in case BLIS was configured with the BLAS
# compatibility layer. This prevents BLIS from inadvertently getting called
# for the BLAS routines we are trying to test with.

test_%_openblas.x: test_%_openblas.o $(BLIS_LIB)
	$(LINKER) $<             $(OPENBLAS_LIB) $(BLIS_LIB) $(LDFLAGS) -o $@

test_%_atlas.x: test_%_atlas.o $(BLIS_LIB)
	$(LINKER) $<             $(ATLAS_LIB)    $(BLIS_LIB) $(LDFLAGS) -o $@

test_%_mkl.x: test_%_mkl.o $(BLIS_LIB)
	$(LINKER) $<             $(MKL_LIB)      $(BLIS_LIB) $(LDFLAGS) -o $@

test_%_blis.x: test_%_blis.o $(BLIS_LIB)
	$(LINKER) $<                             $(BLIS_LIB) $(LDFLAGS) -o $@


# -- Clean rules --

clean: cleanx

cleanx:
	- $(RM_F) *.x

